import React from "react";

const API_BASE = (import.meta as any).env?.VITE_API_BASE || "http://localhost:8000";

type ExportPanelProps = {
  jobId: string;
  ticId: string;
  discoveryDetail: any;
};

export function ExportPanel({ jobId, ticId, discoveryDetail }: ExportPanelProps) {
  const [exporting, setExporting] = React.useState(false);

  const exportJSON = () => {
    const json = JSON.stringify(discoveryDetail, null, 2);
    const blob = new Blob([json], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `TIC_${ticId}_discovery.json`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const exportCSV = async () => {
    setExporting(true);
    try {
      const apiKey = localStorage.getItem("apiKey") || "";
      
      // Fetch lightcurve data
      const lcResp = await fetch(`${API_BASE}/api/discoveries/${jobId}/lightcurve?max_points=50000`, {
        headers: { "X-API-Key": apiKey }
      });
      const lcData = await lcResp.json();

      // Convert to CSV
      let csv = "time,flux\n";
      for (let i = 0; i < lcData.time.length; i++) {
        csv += `${lcData.time[i]},${lcData.flux[i]}\n`;
      }

      // Download
      const blob = new Blob([csv], { type: 'text/csv' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `TIC_${ticId}_lightcurve.csv`;
      a.click();
      URL.revokeObjectURL(url);
    } catch (e: any) {
      alert(`Export failed: ${e.message}`);
    } finally {
      setExporting(false);
    }
  };

  const exportReport = () => {
    const tls = discoveryDetail.tls || {};
    
    let report = `CHISS EXOPLANET CANDIDATE DISCOVERY REPORT\n`;
    report += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n`;
    report += `Target: TIC ${ticId}\n`;
    report += `Discovery Date: ${new Date(discoveryDetail.job?.finished_at * 1000).toLocaleString()}\n`;
    report += `Job ID: ${jobId}\n\n`;
    
    report += `ORBITAL PARAMETERS\n`;
    report += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
    if (tls.period) report += `Period: ${parseFloat(tls.period).toFixed(6)} days\n`;
    if (tls.T0) report += `Epoch (T0): ${parseFloat(tls.T0).toFixed(6)} BJD\n`;
    if (tls.duration) report += `Duration: ${(parseFloat(tls.duration) * 24).toFixed(4)} hours\n`;
    if (tls.depth) report += `Depth: ${(parseFloat(tls.depth) * 1e6).toFixed(1)} ppm\n\n`;
    
    report += `DETECTION METRICS\n`;
    report += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
    if (tls.SDE) report += `SDE: ${parseFloat(tls.SDE).toFixed(2)} œÉ\n`;
    if (tls.snr) report += `SNR: ${parseFloat(tls.snr).toFixed(2)}\n`;
    if (tls.transit_count) report += `Transit Count: ${tls.transit_count}\n\n`;
    
    report += `DATA COVERAGE\n`;
    report += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
    report += `TESS Sectors: ${discoveryDetail.n_sectors}\n`;
    report += `Data Points: ${discoveryDetail.n_points?.toLocaleString()}\n`;
    report += `Timespan: ${discoveryDetail.timespan_days?.toFixed(1)} days\n\n`;
    
    report += `DATA SOURCES\n`;
    report += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
    report += `Primary: NASA MAST (TESS)\n`;
    report += `Pipeline: SPOC (Science Processing Operations Center)\n`;
    report += `Analysis: Transit Least Squares (TLS)\n`;
    report += `Software: Chiss Pipeline v0.1\n\n`;
    
    report += `EXTERNAL RESOURCES\n`;
    report += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
    report += `MAST: https://mast.stsci.edu/portal/Mashup/Clients/Mast/Portal.html?searchQuery=${ticId}\n`;
    report += `ExoFOP: https://exofop.ipac.caltech.edu/tess/target.php?id=${ticId}\n`;
    report += `SIMBAD: http://simbad.u-strasbg.fr/simbad/sim-id?Ident=TIC+${ticId}\n\n`;
    
    report += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;
    report += `Generated by Project Chiss\n`;
    report += `NASA Space Apps Challenge 2024\n`;

    const blob = new Blob([report], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `TIC_${ticId}_report.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const copyAPILink = () => {
    const url = `${API_BASE}/api/discoveries/${jobId}`;
    navigator.clipboard.writeText(url);
    alert("API endpoint copied to clipboard!");
  };

  const openMASTPortal = () => {
    window.open(`https://mast.stsci.edu/portal/Mashup/Clients/Mast/Portal.html?searchQuery=${ticId}`, '_blank');
  };

  const openExoFOP = () => {
    window.open(`https://exofop.ipac.caltech.edu/tess/target.php?id=${ticId}`, '_blank');
  };

  return (
    <div style={{ padding: 20, background: "white", borderRadius: 8, border: "1px solid #ddd" }}>
      <h3 style={{ fontSize: 16, margin: "0 0 16px 0" }}>üì¶ EXPORT & SHARE</h3>
      
      <div style={{ display: "grid", gridTemplateColumns: "repeat(auto-fit, minmax(200px, 1fr))", gap: 12 }}>
        {/* Export Buttons */}
        <button
          onClick={exportJSON}
          style={{
            padding: "12px 16px",
            background: "#0B3D91",
            color: "white",
            border: "none",
            borderRadius: 6,
            cursor: "pointer",
            fontSize: 14,
            fontWeight: 600,
            transition: "all 0.2s"
          }}
          onMouseEnter={(e) => e.currentTarget.style.background = "#1565C0"}
          onMouseLeave={(e) => e.currentTarget.style.background = "#0B3D91"}
        >
          üìÑ Export JSON
        </button>

        <button
          onClick={exportCSV}
          disabled={exporting}
          style={{
            padding: "12px 16px",
            background: exporting ? "#999" : "#00C853",
            color: "white",
            border: "none",
            borderRadius: 6,
            cursor: exporting ? "not-allowed" : "pointer",
            fontSize: 14,
            fontWeight: 600,
            transition: "all 0.2s"
          }}
          onMouseEnter={(e) => {
            if (!exporting) e.currentTarget.style.background = "#00E676";
          }}
          onMouseLeave={(e) => {
            if (!exporting) e.currentTarget.style.background = "#00C853";
          }}
        >
          {exporting ? "‚è≥ Exporting..." : "üìä Export CSV"}
        </button>

        <button
          onClick={exportReport}
          style={{
            padding: "12px 16px",
            background: "#FF6F00",
            color: "white",
            border: "none",
            borderRadius: 6,
            cursor: "pointer",
            fontSize: 14,
            fontWeight: 600,
            transition: "all 0.2s"
          }}
          onMouseEnter={(e) => e.currentTarget.style.background = "#FF8F00"}
          onMouseLeave={(e) => e.currentTarget.style.background = "#FF6F00"}
        >
          üìã Export Report
        </button>

        <button
          onClick={copyAPILink}
          style={{
            padding: "12px 16px",
            background: "#9C27B0",
            color: "white",
            border: "none",
            borderRadius: 6,
            cursor: "pointer",
            fontSize: 14,
            fontWeight: 600,
            transition: "all 0.2s"
          }}
          onMouseEnter={(e) => e.currentTarget.style.background = "#AB47BC"}
          onMouseLeave={(e) => e.currentTarget.style.background = "#9C27B0"}
        >
          üîó Copy API Link
        </button>
      </div>

      {/* Quick Links */}
      <div style={{ marginTop: 16, paddingTop: 16, borderTop: "1px solid #eee" }}>
        <div style={{ fontSize: 12, color: "#666", marginBottom: 12, textTransform: "uppercase" }}>
          Quick Links
        </div>
        <div style={{ display: "flex", gap: 12, flexWrap: "wrap" }}>
          <button
            onClick={openMASTPortal}
            style={{
              padding: "8px 12px",
              background: "#f5f5f5",
              border: "1px solid #ddd",
              borderRadius: 4,
              cursor: "pointer",
              fontSize: 12,
              color: "#0B3D91"
            }}
          >
            MAST Portal ‚Üó
          </button>
          <button
            onClick={openExoFOP}
            style={{
              padding: "8px 12px",
              background: "#f5f5f5",
              border: "1px solid #ddd",
              borderRadius: 4,
              cursor: "pointer",
              fontSize: 12,
              color: "#0B3D91"
            }}
          >
            ExoFOP-TESS ‚Üó
          </button>
        </div>
      </div>

      {/* Attribution Notice */}
      <div style={{ marginTop: 16, padding: 12, background: "#F0F7FF", borderRadius: 6, fontSize: 12, color: "#666" }}>
        <strong>Data Attribution:</strong> This discovery uses data from NASA's Transiting Exoplanet Survey Satellite (TESS), 
        processed by the Science Processing Operations Center (SPOC), and accessed via MAST.
      </div>
    </div>
  );
}

